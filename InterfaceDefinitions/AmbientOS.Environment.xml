<?xml version="1.0" encoding="utf-8"?>
<namespace name="AmbientOS.Environment">
  <summary>
    Contains interfaces related to the system itself, e.g applications, services and settings
  </summary>

  <type lang="C#" name="LogContext" code="LogContext" />
  <type lang="C#" name="Shell" code="IShell" />

  <interface name="Environment">
    <summary>
      Represents the environment in which an action is executed.
    </summary>
    <method name="GetTempFolder" ret="FileSystem.Folder">
      <summary>
        todo: rework this concept
        what properties does a temp folder have? in what context does it exist (application? any object?), when will it be cleared?
        maybe this should be combined with access to other kinds of folders (application data, ...)
        and the thought seems to go a similar way with storing settings
      </summary>
    </method>
  </interface>

  <interface name="Application">
    <summary>
      Represents an application.
      todo: define this interface.
      consider: application icon, associated actions, update, ...
    </summary>
    <property name="Name" type="string" summary="Returns a human readable name of the application." />
    <property name="Description" type="string" summary="Returns a human readable description of the application." />
    <method name="Run">
      <summary>
        Loads and runs the application if neccessary.
        todo: if this is called multiple times for the same application, it should either start a new instance or resume the running instance, depending on whatever policy
      </summary>
    </method>
  </interface>

  <interface name="ObjectProvider">
    <summary>
      Represents an object provider that can directly generate an object of a certain type from another object.
      This is ment for cases where no additional parameters are required for the object generation.
      For other cases, either include an according method in the interface or define a new interface and create a service that does the conversion.
      
      Examples:
      The NTFS service generates a FileSystem from a BlockStream.
      The EEPROM driver generates a BlockStream from an SPI interface.
      The MPU6050 driver generates an MPU6050 object from an SPI interface. This object implements multiple interfaces (for the different sensors on the chip).
      
      Counter Examples:
      Creating a new file should be an activity offered for a folder.
    </summary>
    
    <property name="InputInterface" type="Type" summary="Indicates the name of the interface that this object provider expects as an input." />
    <property name="OutputInterface" type="Type" summary="Indicates the name of the interface that this object provider returns as an output." />
    
    <method name="GetInputConstraints" ret="DynamicSet">
      <summary>
        Returns all acceptables values of the specified property of the input object.
        The system will not try to hand the object provider an object that violates these constraints.
        Returns null if there are no constraints for the specified property.
      </summary>
      <param name="property" type="string" summary="The name of the property for which the constraints should be queried." />
    </method>
    
    <method name="GetOuputAppearance" ret="DynamicSet">
      <summary>
        Returns all possible values that the specified property of the output object can take.
        The system can use this to determine if the object provider is useful for a certain purpose.
        Returns null if there is no prediction about the specified property.
      </summary>
      <param name="property" type="string" summary="The name of the property for which the appearance should be queried." />
    </method>
    
    <method name="Invoke" ret="Object">
      <summary>
        Constructs a new object that implements the output interface from an object that implements the input interface.
        If the input object turns out to be incompatible, the method shall return null.
      </summary>
      <param name="obj" type="Object" summary="The input object from which the output should be generated." />
    </method>
  </interface>
</namespace>