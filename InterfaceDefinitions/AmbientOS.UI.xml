<?xml version="1.0" encoding="utf-8"?>
<namespace name="AmbientOS.UI">
  <enum name="Level">
    <summary>
      Describes how hard to understand or use a specific option or feature is.
    </summary>
    <value name="Recommended" summary="This choice is easy to understand and recommended. Typically, out of multiple options, only one is the recommended one." />
    <value name="Easy" summary="This choice is easy to understand." />
    <value name="Escape" summary="This corresponds to a negative decision, such as No, Cancel" />
    <value name="Advanced" summary="This choice cannot be expected to be the right choice for a basic user. It will only be offered to advanced users." />
  </enum>

  <enum name="Severity">
    <summary>
      The severity of a message.
      Do not use high severities unneccessarily as not to annoy the user.
    </summary>
    <value name="Info" summary="The message is an information. Such a message usually disappears after some time or may not be shown at all." />
    <value name="Success" summary="Some action the user requested succeeded. Such a message usually disappears after some time or may not be shown at all. Examples: success message" />
    <value name="Warning" summary="Some action the user requested could not be started or something else happened that the active user should known about. Examples: battery low" />
    <value name="Error" summary="Some action the user requested could not be completed or something else happened that the active user should known about. Examples: service crashed" />
    <!--<value name="Internal" summary="There was an internal issue. This is usually not shown to normal users. Instead, it is either sent to the responsible system administrator(s) or logged. Example: bug in application" />-->
  </enum>

  <struct name="Text">
    <summary>
      Holds one or more localized strings that describe the same thing with different degrees of detail.
    </summary>
    <field name="Summary" type="string">
      <summary>
        This should be short, very easy to understand and not use any technical terms.
      </summary>
    </field>
    <field name="Details" type="string">
      <summary>
        A more detailed version of the message.
        Can be null.
      </summary>
    </field>
    <field name="Debug" type="string">
      <summary>
        This should include all technical details about the message, specifically for power users and developers.
        Can be null.
      </summary>
    </field>
  </struct>

  <struct name="Option">
    <summary>
      Represents a possible answer by the user to a question posed to the user.
    </summary>
    <field name="Text" type="Text" />
    <field name="Level" type="Level" />
  </struct>

  <enum name="ConsoleColor">
    <value name="DefaultForeground" />
    <value name="DefaultBackground" />
    <value name="Red" />
    <value name="Yellow" />
    <value name="Green" />
    <value name="White" />
    <value name="Gray" />
    <value name="DarkGray" />
    <value name="Black" />
  </enum>
  
  <enum name="Key">
    <summary>
      Represents a normal key (everything that is not an action key).
    </summary>
    <value name="Unknown" value="0" />
    <value name="ArrowUp" />
    <value name="ArrowDown" />
    <value name="ArrowLeft" />
    <value name="ArrowRight" />
    <value name="PageUp" />
    <value name="PageDown" />
    <value name="Home" />
    <value name="End" />
    <value name="Esc" />
    <value name="Enter" />
    <value name="Insert" />
    <value name="Tab" />
    <value name="Backspace" />
    <value name="Space" />
  </enum>

  <enum name="KeyModifiers">
    <summary>
      Represents one or multiple modifier keys.
    </summary>
    <value name="Control" value="0x1" />
    <value name="Alt" value="0x2" />
    <value name="Shift" value="0x4" />
  </enum>
  
  <struct name="KeyPress">
    <field name="Key" type="Key" summary="If Unknown, check the Char field." />
    <field name="Modifiers" type="KeyModifiers" />
    <field name="Char" type="Maybe[char]" summary="Holds the unicode char associated with the key press. Null if no unicode char can be assigned to the key press." />
  </struct>

  <enum name="Modality">
    <summary>
      Governs the display style and behaviour of a UI window or panel.
    </summary>
    <value name="StaticContent">
      <summary>
        A panel with this modality is usually displayed as a tab in a window with static tabs and cannot be moved around.
      </summary>
    </value>
    <value name="DynamicContent">
      <summary>
        A panel with this modality is usually displayed as a dynamic tab and can be moved around, docked to any position in the parent window.
        This is suitable for the documents in a multi-document interface or for the tabs in a browser.
      </summary>
    </value>
    <value name="StaticToolbox">
      <summary>
        A panel with this modality is usually displayed as a docked side bar and cannot be moved around.
        On a small display, a swipe from the side may be required to reveal the panel.
        If multiple panels with this modality are displayed, they may share a single side bar and switching is possible through tabs.
      </summary>
    </value>
    <value name="DynamicToolbox">
      <summary>
        This defines a behaviour that is usually equal to DynamicContent.
        The only difference is that such a panel is by default docked to a side instead of filling the main area.
      </summary>
    </value>
  </enum>

  <enum name="TextType">
    <value name="Arbitrary" />
    <value name="AlphaNumeric" />
    <value name="Numeric" />
    <value name="URL" />
    <value name="Email" />
  </enum>
    
  <struct name="TextInputOptions">
    <field name="TextType" type="TextType" />
    <field name="StartWithCapital" type="bool" />
    <field name="CapitalWords" type="bool" />
  </struct>
  
  <struct name="TextSelectionOptions">
  </struct>
  
  <struct name="GridDefinition">
    <summary>
      Specifies the appearance of a single grid column or row.
      todo: maybe allow to specify a size relative to another grid definition
    </summary>
    <field name="Header" type="Text" />
    <field name="Tight" type="bool" summary="If true, the actual column width or row height is calculated according to the space requirements of the cells." />
    <field name="Size" type="Float64" summary="The relative column width. If Tight is true, a value of 1 means that the column is just wide enough to fit the content. If Tight is false and all columns have the same Size value, all will have the same width, but still at least the content width." />
    <field name="Resizable" type="bool" summary="If true, the user may be able to resize the column width or row height." />
  </struct>
  
  <struct name="FieldDefinition">
    
  </struct>

  <interface name="Console">
    <method name="Write">
      <summary>
        Prints the specified text on the console starting at the current cursor position.
        The cursor is advanced to the location after the text.
        If a character is printed below the last line, the buffer is scrolled accordingly.
        This function shall accept \n as a new line character.
        
        todo: differentiate between the following cases:
         1. bare input/output streams (i.e. a serial communication line)
         2. a simple text-based screen buffer (where we can print any char anywhere)
         3. a fully controllable terminal (where we can clear the screen and scroll)
        case 3 can be built from case 2 or from System.Console (this works only on Windows though)
      </summary>
      <param name="text" type="string" />
      <param name="textColor" type="ConsoleColor" summary="The text color (this may be ignored by some implementations)." />
      <param name="backgroundColor" type="ConsoleColor" summary="The background color (this may be ignored by some implementations)." />
    </method>
    <method name="Read" ret="KeyPress">
      <summary>
        Waits for a single key stroke and returns the result.
        Modifier keys are not recognized on their own.
        The pressed key is not printed to the console.
      </summary>
    </method>
    <method name="Clear">
      <summary>
        Clears the visible console buffer.
      </summary>
      <param name="color" type="ConsoleColor" summary="The background color" />
    </method>
    <method name="Scroll">
      <summary>
        Scrolls the specified number of lines up or down.
        This may not work on some consoles.
      </summary>
      <param name="lines" type="int" summary="The number of lines. Positive is down, negative is up." />
    </method>
    <!--
    <method name="CopyArea">
      <summary>
        Copies an area of the buffer.
      </summary>
      <param name="source" type="Vector2D[int]" summary="The top left point of the source rectangle." />
      <param name="destination" type="Vector2D[int]" summary="The top left point of the destination rectangle." />
      <param name="size" type="Vector2D[int]" summary="The size area to be copied." />
    </method>-->
    <property name="WindowSize" type="Vector2D[int]" summary="The size of the console in chars." />
    <property name="CursorPosition" type="Vector2D[int]" summary="Gets or sets the current cursor position. (0, 0) denotes the top left corner of the console." />
    <property name="CursorVisibility" type="bool" summary="Gets or sets the visibility of the cursor." />
  </interface>
  
  <interface name="Shell">
    <summary>
      A shell is the environment which manages the interaction with the user.
      A shell may be a console, a graphical user interface, a speech based
      interface or anything else that allows for interaction with the user.

      Actually, let's refine that:
      A shell is just an environment for the action, that can be used by the action
      to interact with the platform. If, e.g. an action is executed in a console, that doesn't
      mean that the console is used for all user interaction. The job of figuring out the right mode of
      interaction is the job of the user experience service.
    </summary>
    <method name="PresentDialog" ret="int">
      <summary>
        Presents a message to the user and allows the user to select one out of a set of possible answers.
        Depending on the setting (e.g. if the user is absent or if the shell is not interactive), the shell may decide on its own.
        If the shell makes the decision, it shall do so according to the following rules:
        If the user has answered the same question previously in the same or similar context, the last selection shall be returned.
        If there is are recommended options, the first one shall be selected.
        If there is no recommended option, the first option shall be selected.
      </summary>
      <param name="message" type="Text" />
      <param name="options" type="Array[Option]" />
    </method>
    <method name="Notify">
      <summary>
        Notifies the user about something, e.g. a success or error message.
        Depending on the setting and severity, the message may disappear after some time or not be shown at all.
      </summary>
      <param name="message" type="Text" />
      <param name="severity" type="Severity" />
    </method>
  </interface>

  <interface name="UI">
    <summary>
      Represents the most general description of a user interface.
      A user interface is usually graphical and 2D, but could conceptually also be presented in 3D, a console or through a speech interface.
    </summary>
    <property name="ID" type="string" summary="A key that is unique with respect to the containing context (i.e. parent window or application). This is used by the shell to store and retrieve the window configuration." />
    <property name="Modality" type="Modality" summary="Governs the modality in which the UI is displayed" />
    <property name="Title" type="Text" summary="The title of the UI. This usually makes up the title and subtitle of a window or view." />
    <property name="Menus" type="DynamicSet[Menu]">
      <summary>
        Shall provide all feature sets with a scope that spans the entire UI, or features that should always be visible.
        This may include things such as "Open" or "Create New".
      </summary>
    </property>
  </interface>

  <interface name="Menu">
    <summary>
      Represents a collection of features that should probably be displayed in a group.
    </summary>
  </interface>

  <interface name="PanelUI" inherits="UI">
    <property name="Panels" type="DynamicSet[UI]" summary="Represents the set of panels that should be available in the UI. Their modality defines how these behave." />
  </interface>
  
  <interface name="CustomUI" inherits="UI">
    <property name="Content" type="UIElement" summary="Contains the UI element to display." />
  </interface>

  <interface name="UIElement">
    <summary>
      Base class for all UI elements.
    </summary>
  </interface>

  <interface name="Frames" inherits="UIElement">
    <summary>
      Provides a way of displaying multiple elements on top of each other.
    </summary>
    <property name="Frames" type="DynamicList[UI]" summary="Specifies the frames being displayed." />
  </interface>

  <interface name="Grid" inherits="UIElement">
    <summary>
      Arranges child elements in a matrix.
    </summary>
    <property name="RowDefinitions" type="DynamicList[GridDefinition]" summary="Specifies the row definitions of the grid. If the rows exceed the available space, scrolling is enabled." />
    <property name="ColumnDefinitions" type="DynamicList[GridDefinition]" summary="Specifies the column definitions of the grid. If the columns exceed the available space, scrolling is enabled." />
    <property name="Content" type="Matrix[UIElement]" summary="Holds the actual UI elements of the grid. The row and column with index 0 correspond conceptually to the first row and column in the grid. Whether this corrsponds to the top and right side, depends on the UI context." />
  </interface>
  
  <interface name="Button" inherits="UIElement">
    <summary>
      Displays an element that has an on and off state.
      This can be a button, a checkbox, a switch or something similar.
      has a textbox as content but can contain any UI element.
    </summary>
    <property name="Content" type="UIElement" summary="The content inside or next to the control. This is usually a textbox." />
    <property name="Pressed" type="bool" summary="The pressed-state of the control. This is set and reset by the shell when the user clicks on the button." />
  </interface>

  <interface name="Textbox" inherits="UIElement">
    <summary>
      Displays text. The text can be selectable, editable or none.
    </summary>
    <property name="Text" type="string" />
    <property name="Style" type="Graphics.TextStyle" summary="Customizes the text appearance. If null, the context in which the text is shown defines the style." />
    <property name="InputOptions" type="TextInputOptions" summary="Specifies the behaviour of text input. If null, the text cannot be edited." />
    <property name="SelectionOptions" type="TextSelectionOptions" summary="Specifies the behaviour of text selection. If null, the text cannot be edited." />
  </interface>

  <interface name="Graphics" inherits="UIElement">
    <summary>
      Draws a graphic.
    </summary>
    <property name="Content" type="Graphics.Graphics" summary="The graphics to be displayed" />
  </interface>

  <interface name="List" inherits="UIElement">
    <property name="Items" type="DynamicList[ObjRef]">
      <summary>
        Represents the list of items that should be displayed in the list view.
        Depending on the context and platform, tool windows may be floating or docked to a side of the parent window.
      </summary>
    </property>
    <property name="Fields" type="DynamicSet[FieldDefinition]" />
  </interface>
</namespace>