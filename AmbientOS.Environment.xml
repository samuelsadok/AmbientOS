<?xml version="1.0" encoding="utf-8"?>
<namespace name="AmbientOS.Environment">
  <summary>
    Contains interfaces related to the system itself, e.g applications, services and settings
  </summary>

  <type lang="C#" name="LogContext" code="LogContext" />
  <type lang="C#" name="Shell" code="IShell" />

  <interface name="Environment">
    <summary>
      Represents the environment in which an action is executed.
    </summary>
    <method name="GetTempFolder" ret="FileSystem.Folder">
      <summary>
        todo: rework this concept
        what properties does a temp folder have? in what context does it exist (application? any object?), when will it be cleared?
        maybe this should be combined with access to other kinds of folders (application data, ...)
        and the thought seems to go a similar way with storing settings
      </summary>
    </method>
  </interface>

  <interface name="Application">
    <summary>
      Represents an application.
      todo: define this interface.
      consider: application icon, associated actions, update, ...
    </summary>
    <property name="Name" type="string" summary="Returns a human readable name of the application." />
    <property name="Description" type="string" summary="Returns a human readable description of the application." />
    <method name="Run">
      <summary>
        Loads and runs the application if neccessary.
        todo: if this is called multiple times for the same application, it should either start a new instance or resume the running instance, depending on whatever policy
      </summary>
      <param name="context" type="Context" />
    </method>
  </interface>

  <interface name="Action">
    <summary>
      Represents an action that can execute a verb on specific kinds of objects.
    </summary>
    <property name="Verb" type="string" summary="Returns the verb that this action represents." />
    <property name="InputType" type="Type" summary="Returns the type that this action expects as an input." />
    <property name="OutputType" type="Type" summary="Returns the type that this action returns as an output." />
    <property name="InputTypeName" type="string" summary="Indicates the name of the type that this action expects as an input." />
    <property name="OutputTypeName" type="string" summary="Indicates the name of the type that this action returns as an output." />
    <method name="Invoke" ret="DynamicSet[ObjRef]">
      <summary>
        Excecutes this action on the specified object.
        Shall return the objects that are generated by this action if any.
        If the action yields objects, it shall block until all immediately available objects are initialized and added to the dynamic set.
      </summary>
      <param name="obj" type="ObjRef" summary="The object on which to execute the action" />
      <param name="context" type="Context" summary="The context in which to execute the action" />
    </method>
  </interface>
</namespace>